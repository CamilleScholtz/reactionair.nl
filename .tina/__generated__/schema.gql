# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  artikelen(relativePath: String): Artikelen!
  artikelenConnection(before: String, after: String, first: Float, last: Float, sort: String): ArtikelenConnection!
  dossiers(relativePath: String): Dossiers!
  dossiersConnection(before: String, after: String, first: Float, last: Float, sort: String): DossiersConnection!
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String): DocumentConnection!
}

union DocumentNode = Artikelen | Dossiers

type Artikelen implements Node & Document {
  title: String
  subtitle: String
  date: String
  auteurs: [String]
  themas: [String]
  draft: Boolean
  body: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type ArtikelenConnectionEdges {
  cursor: String!
  node: Artikelen
}

type ArtikelenConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ArtikelenConnectionEdges]
}

type Dossiers implements Node & Document {
  title: String
  heading: String
  description: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type DossiersConnectionEdges {
  cursor: String!
  node: Dossiers
}

type DossiersConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DossiersConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateArtikelen(relativePath: String!, params: ArtikelenMutation!): Artikelen!
  createArtikelen(relativePath: String!, params: ArtikelenMutation!): Artikelen!
  updateDossiers(relativePath: String!, params: DossiersMutation!): Dossiers!
  createDossiers(relativePath: String!, params: DossiersMutation!): Dossiers!
}

input DocumentMutation {
  artikelen: ArtikelenMutation
  dossiers: DossiersMutation
}

input ArtikelenMutation {
  title: String
  subtitle: String
  date: String
  auteurs: [String]
  themas: [String]
  draft: Boolean
  body: String
}

input DossiersMutation {
  title: String
  heading: String
  description: String
}

schema {
  query: Query
  mutation: Mutation
}
  