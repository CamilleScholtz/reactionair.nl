# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  sys: SystemInfo
  id: ID!
  form: JSON!
  values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  getCollection(collection: String): Collection!
  getCollections: [Collection!]!
  node(id: String): Node!
  getDocument(collection: String, relativePath: String): DocumentNode!
  getDocumentList(before: String, after: String, first: Float, last: Float, sort: String): DocumentConnection!
  getDocumentFields: JSON!
  getArtikelenDocument(relativePath: String): ArtikelenDocument!
  getArtikelenList(before: String, after: String, first: Float, last: Float, sort: String): ArtikelenConnection!
  getDossiersDocument(relativePath: String): DossiersDocument!
  getDossiersList(before: String, after: String, first: Float, last: Float, sort: String): DossiersConnection!
}

type DocumentConnectionEdges {
  cursor: String
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String): DocumentConnection!
}

union DocumentNode = ArtikelenDocument | DossiersDocument

type Artikelen {
  title: String
  subtitle: String
  date: String
  auteurs: [String]
  themas: [String]
  draft: Boolean
  body: String
}

type ArtikelenDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Artikelen!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type ArtikelenConnectionEdges {
  cursor: String
  node: ArtikelenDocument
}

type ArtikelenConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [ArtikelenConnectionEdges]
}

type Dossiers {
  title: String
  heading: String
  description: String
}

type DossiersDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Dossiers!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type DossiersConnectionEdges {
  cursor: String
  node: DossiersDocument
}

type DossiersConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [DossiersConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateArtikelenDocument(relativePath: String!, params: ArtikelenMutation!): ArtikelenDocument!
  createArtikelenDocument(relativePath: String!, params: ArtikelenMutation!): ArtikelenDocument!
  updateDossiersDocument(relativePath: String!, params: DossiersMutation!): DossiersDocument!
  createDossiersDocument(relativePath: String!, params: DossiersMutation!): DossiersDocument!
}

input DocumentMutation {
  artikelen: ArtikelenMutation
  dossiers: DossiersMutation
}

input ArtikelenMutation {
  title: String
  subtitle: String
  date: String
  auteurs: [String]
  themas: [String]
  draft: Boolean
  body: String
}

input DossiersMutation {
  title: String
  heading: String
  description: String
}

schema {
  query: Query
  mutation: Mutation
}
  