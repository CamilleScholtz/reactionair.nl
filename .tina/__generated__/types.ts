//@ts-nocheck
// DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
export function gql(strings: TemplateStringsArray, ...args: string[]): string {
  let str = ''
  strings.forEach((string, i) => {
    str += string + (args[i] || '')
  })
  return str
}
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** References another document, used as a foreign key */
  Reference: any;
  JSON: any;
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String'];
  title?: Maybe<Scalars['String']>;
  basename: Scalars['String'];
  breadcrumbs: Array<Scalars['String']>;
  path: Scalars['String'];
  relativePath: Scalars['String'];
  extension: Scalars['String'];
  template: Scalars['String'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']>;
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean'];
  hasNextPage: Scalars['Boolean'];
  startCursor: Scalars['String'];
  endCursor: Scalars['String'];
};

export type Node = {
  id: Scalars['ID'];
};

export type Document = {
  id: Scalars['ID'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  artikelen: Artikelen;
  artikelenConnection: ArtikelenConnection;
  dossiers: Dossiers;
  dossiersConnection: DossiersConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryArtikelenArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryArtikelenConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
};


export type QueryDossiersArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryDossiersConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String'];
  slug: Scalars['String'];
  label?: Maybe<Scalars['String']>;
  path: Scalars['String'];
  format?: Maybe<Scalars['String']>;
  matches?: Maybe<Scalars['String']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
};

export type DocumentNode = Artikelen | Dossiers;

export type Artikelen = Node & Document & {
  __typename?: 'Artikelen';
  title?: Maybe<Scalars['String']>;
  subtitle?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['String']>;
  auteurs?: Maybe<Array<Maybe<Scalars['String']>>>;
  themas?: Maybe<Array<Maybe<Scalars['String']>>>;
  draft?: Maybe<Scalars['Boolean']>;
  body?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type ArtikelenConnectionEdges = {
  __typename?: 'ArtikelenConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Artikelen>;
};

export type ArtikelenConnection = Connection & {
  __typename?: 'ArtikelenConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<ArtikelenConnectionEdges>>>;
};

export type Dossiers = Node & Document & {
  __typename?: 'Dossiers';
  title?: Maybe<Scalars['String']>;
  heading?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type DossiersConnectionEdges = {
  __typename?: 'DossiersConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Dossiers>;
};

export type DossiersConnection = Connection & {
  __typename?: 'DossiersConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<DossiersConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  updateArtikelen: Artikelen;
  createArtikelen: Artikelen;
  updateDossiers: Dossiers;
  createDossiers: Dossiers;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String'];
  relativePath: Scalars['String'];
  template?: InputMaybe<Scalars['String']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationUpdateArtikelenArgs = {
  relativePath: Scalars['String'];
  params: ArtikelenMutation;
};


export type MutationCreateArtikelenArgs = {
  relativePath: Scalars['String'];
  params: ArtikelenMutation;
};


export type MutationUpdateDossiersArgs = {
  relativePath: Scalars['String'];
  params: DossiersMutation;
};


export type MutationCreateDossiersArgs = {
  relativePath: Scalars['String'];
  params: DossiersMutation;
};

export type DocumentMutation = {
  artikelen?: InputMaybe<ArtikelenMutation>;
  dossiers?: InputMaybe<DossiersMutation>;
};

export type ArtikelenMutation = {
  title?: InputMaybe<Scalars['String']>;
  subtitle?: InputMaybe<Scalars['String']>;
  date?: InputMaybe<Scalars['String']>;
  auteurs?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  themas?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  draft?: InputMaybe<Scalars['Boolean']>;
  body?: InputMaybe<Scalars['String']>;
};

export type DossiersMutation = {
  title?: InputMaybe<Scalars['String']>;
  heading?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
};

export type ArtikelenPartsFragment = { __typename?: 'Artikelen', title?: string | null, subtitle?: string | null, date?: string | null, auteurs?: Array<string | null> | null, themas?: Array<string | null> | null, draft?: boolean | null, body?: string | null };

export type DossiersPartsFragment = { __typename?: 'Dossiers', title?: string | null, heading?: string | null, description?: string | null };

export type ArtikelenQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type ArtikelenQuery = { __typename?: 'Query', artikelen: { __typename?: 'Artikelen', id: string, title?: string | null, subtitle?: string | null, date?: string | null, auteurs?: Array<string | null> | null, themas?: Array<string | null> | null, draft?: boolean | null, body?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type ArtikelenConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
}>;


export type ArtikelenConnectionQuery = { __typename?: 'Query', artikelenConnection: { __typename?: 'ArtikelenConnection', totalCount: number, edges?: Array<{ __typename?: 'ArtikelenConnectionEdges', node?: { __typename?: 'Artikelen', id: string, title?: string | null, subtitle?: string | null, date?: string | null, auteurs?: Array<string | null> | null, themas?: Array<string | null> | null, draft?: boolean | null, body?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type DossiersQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type DossiersQuery = { __typename?: 'Query', dossiers: { __typename?: 'Dossiers', id: string, title?: string | null, heading?: string | null, description?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type DossiersConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
}>;


export type DossiersConnectionQuery = { __typename?: 'Query', dossiersConnection: { __typename?: 'DossiersConnection', totalCount: number, edges?: Array<{ __typename?: 'DossiersConnectionEdges', node?: { __typename?: 'Dossiers', id: string, title?: string | null, heading?: string | null, description?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export const ArtikelenPartsFragmentDoc = gql`
    fragment ArtikelenParts on Artikelen {
  title
  subtitle
  date
  auteurs
  themas
  draft
  body
}
    `;
export const DossiersPartsFragmentDoc = gql`
    fragment DossiersParts on Dossiers {
  title
  heading
  description
}
    `;
export const ArtikelenDocument = gql`
    query artikelen($relativePath: String!) {
  artikelen(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...ArtikelenParts
  }
}
    ${ArtikelenPartsFragmentDoc}`;
export const ArtikelenConnectionDocument = gql`
    query artikelenConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String) {
  artikelenConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
  ) {
    totalCount
    edges {
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...ArtikelenParts
      }
    }
  }
}
    ${ArtikelenPartsFragmentDoc}`;
export const DossiersDocument = gql`
    query dossiers($relativePath: String!) {
  dossiers(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...DossiersParts
  }
}
    ${DossiersPartsFragmentDoc}`;
export const DossiersConnectionDocument = gql`
    query dossiersConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String) {
  dossiersConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
  ) {
    totalCount
    edges {
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...DossiersParts
      }
    }
  }
}
    ${DossiersPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      artikelen(variables: ArtikelenQueryVariables, options?: C): Promise<{data: ArtikelenQuery, variables: ArtikelenQueryVariables, query: string}> {
        return requester<{data: ArtikelenQuery, variables: ArtikelenQueryVariables, query: string}, ArtikelenQueryVariables>(ArtikelenDocument, variables, options);
      },
    artikelenConnection(variables?: ArtikelenConnectionQueryVariables, options?: C): Promise<{data: ArtikelenConnectionQuery, variables: ArtikelenConnectionQueryVariables, query: string}> {
        return requester<{data: ArtikelenConnectionQuery, variables: ArtikelenConnectionQueryVariables, query: string}, ArtikelenConnectionQueryVariables>(ArtikelenConnectionDocument, variables, options);
      },
    dossiers(variables: DossiersQueryVariables, options?: C): Promise<{data: DossiersQuery, variables: DossiersQueryVariables, query: string}> {
        return requester<{data: DossiersQuery, variables: DossiersQueryVariables, query: string}, DossiersQueryVariables>(DossiersDocument, variables, options);
      },
    dossiersConnection(variables?: DossiersConnectionQueryVariables, options?: C): Promise<{data: DossiersConnectionQuery, variables: DossiersConnectionQueryVariables, query: string}> {
        return requester<{data: DossiersConnectionQuery, variables: DossiersConnectionQueryVariables, query: string}, DossiersConnectionQueryVariables>(DossiersConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (client: TinaClient) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: any,
    client
  ) => Promise<any> = async (doc, vars, _options) => {
    let data = {};
    try {
      data = await client.request({
        query: doc,
        variables: vars,
      });
    } catch (e) {
      // swallow errors related to document creation
      console.warn("Warning: There was an error when fetching data");
      console.warn(e);
    }

    return { data: data?.data, query: doc, variables: vars || {} };
  };

  return requester;
};

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(createClient({ url: "http://localhost:4001/graphql" }))
  );

export const queries = (client: TinaClient) => {
  const requester = generateRequester(client);
  return getSdk(requester);
};

